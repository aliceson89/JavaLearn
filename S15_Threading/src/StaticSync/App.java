package StaticSync;
class Braket{

    synchronized static public void generate(String threadCode){
        for (int i = 1; i <= 10; i++){
            if(i <= 5){
                System.out.print("[");
            }else{
                System.out.print("]");
            }
        }
        System.out.println("Generated by thread: " +threadCode);
    }
}

public class App {
    public static void main (String[] args){


        new Thread(new Runnable() {
            @Override
            public void run() {
                long startTime = System.currentTimeMillis();
                for(int i = 1; i <=5; i ++){
                    Braket.generate("Thread1");
                }
                long endTime = System.currentTimeMillis();
                System.out.println("Time required thread1 was : " + (endTime-startTime));
            }
        }).start();

        new Thread(new Runnable() {
            @Override
            public void run() {
                long startTime = System.currentTimeMillis();
                for(int i = 1; i <=5; i ++){
                    Braket.generate("Thread2");
                }
                long endTime = System.currentTimeMillis();
                System.out.println("Time required thread2 was : " + (endTime-startTime));
            }
        }).start();

        /** before apply static sync output : inconsistent
         * [[[[[]]]]]Generated by thread: Thread1
         * [[[[[]]]]]Generated by thread: Thread1
         * [[[[[]]]]]Generated by thread: Thread1
         * [[[[[]]]]]Generated by thread: Thread1
         * [[[[[]]]]][[[[[]]]]]Generated by thread: Thread1
         * Generated by thread: Thread2
         * [[[[[]]]Time required thread1 was : 1
         * ]]Generated by thread: Thread2
         * [[[[[]]]]]Generated by thread: Thread2
         * [[[[[]]]]]Generated by thread: Thread2
         * [[[[[]]]]]Generated by thread: Thread2
         * Time required thread2 was : 1
         *
         */

    }
}

